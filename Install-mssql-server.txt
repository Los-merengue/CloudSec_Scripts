MSSQL on Debian 12

MSSQL INSTALL INSTRUCTIONS :
https://www.howtoforge.com/how-to-install-and-use-microsoft-sql-server-on-debian-11/


Run these with either SUDO before these commands or login with su - and run these commands.
I am running typically under as SU so do not require sudo infront.

apt update

apt install gnupg2 apt-transport-https wget curl -y

wget -q -O- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /usr/share/keyrings/microsoft.gpg > /dev/null 2>&1


Now enter the command below to add the MSSQL Server repository to your Debian system.
 
Because Microsoft did not provide the MSSQL Server package for Debian distribution, you will be using the MSSQL Server package for Ubuntu.

Run this command (trust me Ubuntu version worked just fine)

This command is for 2019 version, we will at time of writing be using 2022 version instead see command below.

echo "deb [signed-by=/usr/share/keyrings/microsoft.gpg arch=amd64,armhf,arm64] https://packages.microsoft.com/ubuntu/20.04/mssql-server-2019 focal main" | tee /etc/apt/sources.list.d/mssql-server-2019.list


Command for 2022:

echo "deb [signed-by=/usr/share/keyrings/microsoft.gpg arch=amd64,armhf,arm64] https://packages.microsoft.com/ubuntu/20.04/mssql-server-2022/ focal main" | tee /etc/apt/sources.list.d/mssql-server-2022.list

apt update

apt install mssql-server -y

After install lets setup/configure the database to run as MSSQL Express, since we do not have license for Standard etc.

/opt/mssql/bin/mssql-conf setup

Password we shall choose SQL SA user : Plzsub2mychannel

Do not copy paste, type in the passwords please. I had to reset the password.

Now lets attempt to start. 

systemctl start mssql-server

Error will be posted:
Job for mssql-server.service failed because the control process exited with error code.

You will not be able to start MSSQL cause Debian 12 has some older missing librariers, so this error will be received, starting SQL 
Process: 31321 ExecStart=/opt/mssql/bin/sqlservr (code=exited, status=127)


Run command to find whats missing :

journalctl -u mssql-server.service -b

You will get error details such as this :
Oct 08 18:13:32 deb12base sqlservr[1667]: /opt/mssql/bin/sqlservr: error while loading shared libraries: liblber-2.4.so.2: cannot open shared object file: No such file or >
Oct 08 18:13:32 deb12base systemd[1]: mssql-server.service: Main process exited, code=exited, status=127/n/a


Seems like Debian 12 has 2.5 version and needs 2.4 for MSSQL , you can see the version you got installed by :

apt show libldap-common

Package: libldap-common
Version: 2.5.13+dfsg-5
Priority: optional
Section: libs
Source: openldap
Maintainer: Debian OpenLDAP Maintainers <pkg-openldap-devel@lists.alioth.debian.org>
Installed-Size: 94.2 kB
Replaces: libldap-2.4-2 (<< 2.4.44+dfsg-1)
Homepage: https://www.openldap.org/



If you want to find if there is older version available you can use command : apt list -a libldap-common
will give you : 
libldap-common/stable,now 2.5.13+dfsg-5 all [installed,automatic]


So lets fix first error use these commands :

go to your download folder you might be using etc.


Fix the errors :

create and browse to new folder for downloads or any location you prefer, so can download and install the older libraries so SQL can start.

wget http://http.us.debian.org/debian/pool/main/o/openldap/libldap-2.4-2_2.4.47+dfsg-3+deb10u7_amd64.deb

apt install above downloaded deb file location.

Please note you will get an Information message thats what the N stands for saying permission denied, ignore and go to next step.
N: user '_apt'. - pkgAcquire::Run (13: Permission denied)

Try running MSSQL again and it will fail again and with new error message.
systemctl start mssql-server

 systemctl status mssql-server 
 will show error message.
 
  Process: 1771 ExecStart=/opt/mssql/bin/sqlservr (code=exited, status=127)
  
Now if you look at full details you will see new  error for libssl.

journalctl -u mssql-server.service -b

Oct 08 18:23:38 deb12base sqlservr[1935]: /opt/mssql/bin/sqlservr: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or dir>
Oct 08 18:23:38 deb12base systemd[1]: mssql-server.service: Main process exited, code=exited, status=127/n/a



You can go to site for all libraries you like to install : https://packages.debian.org/bullseye/libs/

So lets download and install one more library. 

wget http://ftp.us.debian.org/debian/pool/main/o/openssl/libssl1.1_1.1.1w-0+deb11u1_amd64.deb
apt install above downloaded deb file location.

apt update

now try starting sql
systemctl start mssql-server

If it does not start right away, do a reboot of the machine, or wait for like a minute or 2 and try starting again. Not sure why it needs reboot, but works.

It should be up and running now, you can verify using command :
systemctl status mssql-server

● mssql-server.service - Microsoft SQL Server Database Engine
     Loaded: loaded (/lib/systemd/system/mssql-server.service; enabled; preset: enabled)
     Active: active (running) since Sun 2023-10-08 18:26:56 EDT; 4s ago
       Docs: https://docs.microsoft.com/en-us/sql/linux
   Main PID: 2530 (sqlservr)
      Tasks: 159
     Memory: 658.5M
        CPU: 5.795s
     CGroup: /system.slice/mssql-server.service
             ├─2530 /opt/mssql/bin/sqlservr
             └─2532 /opt/mssql/bin/sqlservr

Oct 08 18:27:00 deb12base sqlservr[2532]: [111B blob data]
Oct 08 18:27:00 deb12base sqlservr[2532]: [111B blob data]

You can enable the mssql server as a service so it restarts after server reboot.
systemctl enable mssql-server

Now lets install the tools, so you can enable remote access to database if you choose to and to also run commands on the server locally like creating databases and users etc.

SQL TOOLS INSTALL:

echo "deb [signed-by=/usr/share/keyrings/microsoft.gpg arch=amd64,armhf,arm64] https://packages.microsoft.com/ubuntu/20.04/prod focal main" | tee /etc/apt/sources.list.d/prod.list

apt update
apt install mssql-tools unixodbc-dev -y
Accept the license terms.
With the default configuration, the MSSQL Tools can be executed only within the '/opt/mssql-tools/bin' directory. 
To solve this, you must add the '/opt/mssql-tools/bin' directory to the system PATH environment via the '~/.bashrc' configuration.

Enter the following command to add the '/opt/mssql-tools/bin' to the binary PATH environment variable.

echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc

source ~/.bashrc

echo $PATH

If all is done right you can issue commands as listed below or any commands you want to run. That is it, SQL server and tools are installed now.

Check version :
sqlcmd -S localhost -U SA -p
select @@version
go

You should see :
Microsoft SQL Server 2022 (RTM-CU8) (KB5029666) - 16.0.4075.1 (X64)
        Aug 23 2023 14:04:50
        Copyright (C) 2022 Microsoft Corporation
        Express Edition (64-bit) on Linux (Debian GNU/Linux 12 (bookworm)) <X64>     

=======Remote access enable command ===========
1433 port for firewall worked to sql access via remote

sqlcmd -S localhost -U SA -p

To allow remote connection from Sql Management Studio
EXEC sp_configure 'remote admin connections', 1;
GO
RECONFIGURE;
GO


Thanks for Watching !

youtube.com/@hashtagtnt

Stay Safe everyone..

If you can support me on Patreon that be awesome..

https://www.patreon.com/HashTagTNT

Yours Truely
